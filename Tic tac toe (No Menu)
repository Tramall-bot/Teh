#include <Windows.h>
#include<tchar.h>
#include <commdlg.h>
#include <fstream>
#include <vector>
#include <string>
#include "Header.h"

TCHAR szChildClass[MAX_LOADSTRING] = _T("WinChild");
const int LineHeight = 16;
LRESULT CALLBACK ChildProc(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
TCHAR szClassName[] = _T("MainFrame");
HINSTANCE hInst;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
	hInst = hInstance;
	HWND hWnd;
	MSG msg;
	WNDCLASSEX wc;
	wc.cbSize = sizeof(wc);
	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc = WndProc;
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW +1);
	wc.lpszMenuName = _T("MAIN MENU");
	wc.lpszClassName = szClassName;
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	if (!RegisterClassEx(&wc)) {
		return 0;
	}

	hWnd = CreateWindow(szClassName, _T("Win"), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, HWND_DESKTOP, NULL,
		hInstance, NULL);
	ShowWindow(hWnd, nCmdShow);
	while (GetMessage(&msg, NULL, 0, 0)) {
		TranslateMessage(&msg);
		DispatchMessageW(&msg);
	}
	return 0;
}

ATOM MyRegisterChildClass()
{
	int temp;
	WNDCLASSEX wcex = { 0 };
	wcex.cbSize = sizeof(WNDCLASSEX);
	wcex.lpfnWndProc = ChildProc;
	wcex.hInstance = hInst;
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wcex.lpszClassName = szChildClass;
	

	
	RegisterClassEx(&wcex);
	if (!RegisterClassEx(&wcex))
		temp = 1;
	return (RegisterClassEx(&wcex)!=0);
}

static HFONT newFont;
static HWND hChild[9];
unsigned char k[9] = { 0 };
char text[] = { ' ','x' ,'0' };

LRESULT CALLBACK WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
	int i;
	static int cx, cy;
	int temp;
	switch (uMsg) {
	case WM_CREATE:
		MyRegisterChildClass();
		for (i = 0; i < 9; i++)
		{
			hChild[i] = CreateWindow(szChildClass, NULL, WS_CHILD | WS_DLGFRAME | WS_VISIBLE, 0, 0, 0, 0, hWnd, NULL, hInst, NULL);
		}
		break;
	case WM_SIZE:
		if (wParam == SIZE_MINIMIZED)
		{
			break;
		}
		cx = LOWORD(lParam) / 3;
		cy = HIWORD(lParam) / 3;
		if (newFont)
		{
			DeleteObject(newFont);
		}
		newFont = CreateFont(min(cx, cy), 0, 0, 0, FW_NORMAL, 0, 0, 0, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, _T("Arial"));
		for (i = 0; i < 9; i++)
		{
			MoveWindow(hChild[i], (i % 3) * cx, (i / 3) * cy, cx, cy, TRUE);
			UpdateWindow(hChild[i]);
		}
		break;
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case ID_NEW:
			for (i = 0; i < 9; i++)
			{
				k[i] = 0;
				InvalidateRect(hChild[i], NULL, 1);
				UpdateWindow(hChild[i]);
			}
			break;
		case IDM_EXT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, uMsg, wParam, lParam);
		}
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, uMsg, wParam, lParam);
	}
	return 0;

}

LRESULT CALLBACK ChildProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;
	RECT rect;
	char* ch;
	int i, s;
	switch (msg)
	{
	case WM_LBUTTONDOWN:
		for (i = 0; hWnd != hChild[i]; i++)
		{
			if (k[i])
				break;
			else
			{
				k[i] = 1;
			}
		}
		InvalidateRect(hWnd, NULL, 1);
		UpdateWindow(hWnd);
		srand(lParam);
		for (i = s = 0; i < 9; i++)
		{
			if (k[i])
				s++;
		}
		if (s == 9)
		{
			MessageBox(hWnd, _T("Для следующего сеанса выбирите New"), _T("Конец игры"), MB_OK | MB_ICONQUESTION);

		}
		else
		{
			while (true) {
				s = rand() * 9 / (RAND_MAX + 1);
				if (k[s])
				{
					continue;
				}
				k[s] = 2;
				InvalidateRect(hChild[s], NULL, 1);
				UpdateWindow(hChild[s]);
				break;
			}
		}
		break;
	case WM_PAINT:
		for (i = 0; hWnd != hChild[i]; i++)
		{
			if (k[i])
			{
				ch = text + k[i];
				hdc = BeginPaint(hWnd, &ps);
				GetClientRect(hWnd, &rect);
				SelectObject(hdc, newFont);
				DrawText(hdc, ch, 1, &rect, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
				EndPaint(hWnd, &ps);
			}
			else
				DefWindowProc(hWnd, msg, wParam, lParam);
		}
		break;
	default:
		return DefWindowProc(hWnd, msg, wParam, lParam);
	}
	return 0;
}
